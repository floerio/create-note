import { App, Plugin, TFile, TFolder, Notice, Modal, Setting } from 'obsidian';

/**
 * Options for processing files with date prefixes
 */
interface ProcessingOptions {
    /**
     * Path to process (empty string for entire vault)
     */
    folderPath: string;
    
    /**
     * Include subfolders when processing
     */
    includeSubfolders: boolean;
}

/**
 * Process files and add date prefixes based on frontmatter 'created' date
 * @param app The Obsidian App instance
 * @param options Processing options configuration
 */
export async function processFrontmatterDates(
    app: App, 
    options: ProcessingOptions
): Promise<void> {
    // Get files to process
    const filesToProcess: TFile[] = [];
    
    // Process entire vault
    if (!options.folderPath) {
        filesToProcess.push(...app.vault.getMarkdownFiles());
    } 
    // Process specific folder
    else {
        const folder = app.vault.getAbstractFileByPath(options.folderPath);
        
        if (!folder || !(folder instanceof TFolder)) {
            new Notice(`Folder not found: ${options.folderPath}`);
            return;
        }
        
        // Function to collect files from a folder
        const collectFiles = (folder: TFolder) => {
            folder.children.forEach(child => {
                // Process files
                if (child instanceof TFile && child.extension === 'md') {
                    filesToProcess.push(child);
                } 
                // Process subfolders if requested
                else if (options.includeSubfolders && child instanceof TFolder) {
                    collectFiles(child);
                }
            });
        };
        
        collectFiles(folder);
    }
    
    // Process counters
    let processedCount = 0;
    let skippedCount = 0;
    
    // Show progress
    const totalFiles = filesToProcess.length;
    new Notice(`Processing ${totalFiles} files...`);
    
    // Process each file
    for (const file of filesToProcess) {
        // Skip files in excluded folders (containing "/_files/" anywhere in path)
        if (file.path.includes('/_files/')) {
            skippedCount++;
            continue;
        }
        
        // Skip files that already have a date prefix (YYYY-MM-DD or YYYYMMDD)
        if (file.basename.match(/^(\d{4}-\d{2}-\d{2}|\d{8})\s/)) {
            skippedCount++;
            continue;
        }
        
        try {
            // Read file content
            const content = await app.vault.read(file);
            
            // Extract frontmatter
            const frontmatterMatch = content.match(/^---\s*([\s\S]*?)\s*---/);
            if (!frontmatterMatch) {
                console.log(`No frontmatter found in ${file.path}`);
                skippedCount++;
                continue;
            }
            
            const frontmatter = frontmatterMatch[1];
            
            // Look for created date in frontmatter
            const createdMatch = frontmatter.match(/created\s*:\s*['"]?(.*?)['"]?(\s|$)/);
            if (!createdMatch) {
                console.log(`No 'created' field in frontmatter of ${file.path}`);
                skippedCount++;
                continue;
            }
            
            const createdDateString = createdMatch[1].trim();
            
            // Parse the date (handling both YYYY-MM-DD and DD.MM.YYYY formats)
            let parsedDate: Date | null = null;
            
            // Check for YYYY-MM-DD format
            if (createdDateString.match(/^\d{4}-\d{2}-\d{2}/)) {
                parsedDate = new Date(createdDateString);
            } 
            // Check for DD.MM.YYYY format
            else if (createdDateString.match(/^\d{2}\.\d{2}\.\d{4}/)) {
                const [day, month, year] = createdDateString.split('.').map(Number);
                parsedDate = new Date(year, month - 1, day);
            }
            
            // Verify we have a valid date
            if (!parsedDate || isNaN(parsedDate.getTime())) {
                console.log(`Invalid date format in ${file.path}: ${createdDateString}`);
                skippedCount++;
                continue;
            }
            
            // Format date as YYYY-MM-DD
            const formattedDate = parsedDate.toISOString().slice(0, 10);
            
            // Create new filename with date prefix
            const folderPath = file.path.substring(0, file.path.lastIndexOf('/') + 1) || '';
            const newFilename = `${formattedDate} ${file.basename}`;
            const newPath = `${folderPath}${newFilename}.md`;
            
            // Skip if the new path would be the same as the old one
            if (newPath === file.path) {
                skippedCount++;
                continue;
            }
            
            // Rename the file
            await app.fileManager.renameFile(file, newPath);
            processedCount++;
            
            // Show periodic progress updates for large operations
            if (processedCount % 20 === 0) {
                new Notice(`Processed ${processedCount} of ${totalFiles} files...`);
            }
            
            // Optional: Add a small delay to prevent overwhelming the file system
            await new Promise(resolve => setTimeout(resolve, 50));
            
        } catch (error) {
            console.error(`Error processing ${file.path}:`, error);
            skippedCount++;
        }
    }
    
    // Show completion notice
    new Notice(`Renamed ${processedCount} files with date prefixes. Skipped ${skippedCount} files.`);
}

/**
 * Modal for selecting processing options
 */
class ProcessingOptionsModal extends Modal {
    options: ProcessingOptions;
    onSubmit: (options: ProcessingOptions) => void;
    folders: { path: string, folder: TFolder }[] = [];
    
    constructor(app: App, onSubmit: (options: ProcessingOptions) => void) {
        super(app);
        this.onSubmit = onSubmit;
        this.options = {
            folderPath: '',
            includeSubfolders: true
        };
        
        // Build folder list
        this.folders = [];
        this.collectFolders(app.vault.getRoot());
    }
    
    collectFolders(folder: TFolder) {
        // Don't include root folder in the list for cleaner UI
        if (folder.path !== '/') {
            this.folders.push({ path: folder.path, folder });
        }
        
        folder.children.forEach(child => {
            if (child instanceof TFolder) {
                this.collectFolders(child);
            }
        });
    }
    
    onOpen() {
        const { contentEl } = this;
        
        contentEl.createEl('h2', { text: 'Rename Notes with Date Prefix' });
        
        new Setting(contentEl)
            .setName('Scope')
            .setDesc('Choose to process the entire vault or a specific folder')
            .addDropdown(dropdown => {
                dropdown
                    .addOption('vault', 'Entire Vault')
                    .addOption('folder', 'Specific Folder')
                    .setValue('vault')
                    .onChange(value => {
                        if (value === 'vault') {
                            this.options.folderPath = '';
                            folderSelectionContainer.style.display = 'none';
                        } else {
                            folderSelectionContainer.style.display = 'block';
                        }
                    });
            });
        
        // Container for folder selection (initially hidden)
        const folderSelectionContainer = contentEl.createDiv();
        folderSelectionContainer.style.display = 'none';
        
        new Setting(folderSelectionContainer)
            .setName('Select Folder')
            .setDesc('Choose which folder to process')
            .addDropdown(dropdown => {
                // Sort folders alphabetically for better UX
                this.folders.sort((a, b) => a.path.localeCompare(b.path));
                
                // Add each folder as an option
                this.folders.forEach(folderInfo => {
                    dropdown.addOption(folderInfo.path, folderInfo.path);
                });
                
                if (this.folders.length > 0) {
                    dropdown.setValue(this.folders[0].path);
                    this.options.folderPath = this.folders[0].path;
                }
                
                dropdown.onChange(value => {
                    this.options.folderPath = value;
                });
            });
        
        new Setting(folderSelectionContainer)
            .setName('Include Subfolders')
            .setDesc('Process notes in subfolders as well')
            .addToggle(toggle => {
                toggle
                    .setValue(this.options.includeSubfolders)
                    .onChange(value => {
                        this.options.includeSubfolders = value;
                    });
            });
        
        new Setting(contentEl)
            .addButton(button => {
                button
                    .setButtonText('Cancel')
                    .onClick(() => this.close());
            })
            .addButton(button => {
                button
                    .setCta()
                    .setButtonText('Start Processing')
                    .onClick(() => {
                        this.close();
                        this.onSubmit(this.options);
                    });
            });
    }
    
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

/**
 * Example plugin implementation with options modal
 */
export default class DatePrefixPlugin extends Plugin {
    async onload() {
        // Add command to open the options modal
        this.addCommand({
            id: 'add-created-date-prefixes',
            name: 'Add created date prefixes to notes',
            callback: () => {
                new ProcessingOptionsModal(this.app, (options) => {
                    processFrontmatterDates(this.app, options);
                }).open();
            }
        });
        
        // Add command to process entire vault directly (for convenience)
        this.addCommand({
            id: 'add-created-date-prefixes-entire-vault',
            name: 'Add created date prefixes to all notes in vault',
            callback: () => {
                processFrontmatterDates(this.app, {
                    folderPath: '',
                    includeSubfolders: true
                });
            }
        });
    }
}
